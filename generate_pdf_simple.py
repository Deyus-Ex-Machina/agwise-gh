#!/usr/bin/env python3
"""
Generate PDF report from comprehensive EDA markdown with embedded visualizations.
Uses reportlab for cross-platform compatibility.

Author: Claude Code
Date: October 5, 2025
"""

from reportlab.lib import colors
from reportlab.lib.pagesizes import letter
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.platypus import (
    SimpleDocTemplate, Paragraph, Spacer, PageBreak, Image,
    Table, TableStyle, KeepTogether
)
from reportlab.lib.enums import TA_CENTER, TA_JUSTIFY, TA_LEFT
from pathlib import Path
import re

# Paths
BASE_DIR = Path('/Users/deyus-ex-machina/agwise/agwise_eda')
REPORT_MD = BASE_DIR / 'reports' / 'COMPREHENSIVE_EDA_REPORT.md'
VIZ_DIR = BASE_DIR / 'outputs' / 'visualizations'
OUTPUT_PDF = BASE_DIR / 'reports' / 'COMPREHENSIVE_EDA_REPORT.pdf'

print("="*80)
print("GENERATING PDF REPORT WITH VISUALIZATIONS")
print("="*80)

# Read markdown
print("\n1. Reading markdown report...")
with open(REPORT_MD, 'r', encoding='utf-8') as f:
    md_content = f.read()

print(f"   ✓ Loaded {len(md_content)} characters")

# Create PDF
print("\n2. Setting up PDF document...")
doc = SimpleDocTemplate(
    str(OUTPUT_PDF),
    pagesize=letter,
    rightMargin=0.75*inch,
    leftMargin=0.75*inch,
    topMargin=1*inch,
    bottomMargin=0.75*inch,
)

# Build content
story = []
styles = getSampleStyleSheet()

# Custom styles
title_style = ParagraphStyle(
    'CustomTitle',
    parent=styles['Heading1'],
    fontSize=24,
    textColor=colors.HexColor('#2c5f2d'),
    spaceAfter=30,
    alignment=TA_CENTER,
    fontName='Helvetica-Bold'
)

heading1_style = ParagraphStyle(
    'CustomHeading1',
    parent=styles['Heading1'],
    fontSize=16,
    textColor=colors.HexColor('#2c5f2d'),
    spaceAfter=12,
    spaceBefore=20,
    fontName='Helvetica-Bold'
)

heading2_style = ParagraphStyle(
    'CustomHeading2',
    parent=styles['Heading2'],
    fontSize=14,
    textColor=colors.HexColor('#2c5f2d'),
    spaceAfter=10,
    spaceBefore=15,
    fontName='Helvetica-Bold'
)

heading3_style = ParagraphStyle(
    'CustomHeading3',
    parent=styles['Heading3'],
    fontSize=12,
    textColor=colors.HexColor('#555555'),
    spaceAfter=8,
    spaceBefore=12,
    fontName='Helvetica-Bold'
)

body_style = ParagraphStyle(
    'CustomBody',
    parent=styles['BodyText'],
    fontSize=10,
    alignment=TA_JUSTIFY,
    spaceAfter=6,
)

code_style = ParagraphStyle(
    'Code',
    parent=styles['Code'],
    fontSize=8,
    fontName='Courier',
    backColor=colors.HexColor('#f4f4f4'),
    borderPadding=5,
)

# Cover page
print("\n3. Creating cover page...")
story.append(Spacer(1, 2*inch))
story.append(Paragraph("Agricultural Soil Health", title_style))
story.append(Paragraph("Exploratory Data Analysis", title_style))
story.append(Spacer(1, 0.3*inch))
story.append(Paragraph("Comprehensive Report with Visualizations", heading2_style))
story.append(Spacer(1, 0.5*inch))

cover_info_style = ParagraphStyle('CoverInfo', parent=styles['Normal'],
                                  fontSize=11, alignment=TA_CENTER)
story.append(Paragraph("Dataset: 300 Soil Test Files | 3,625 Samples", cover_info_style))
story.append(Paragraph("Analysis Date: October 5, 2025", cover_info_style))
story.append(Paragraph("Generated by: Claude Code", cover_info_style))
story.append(Spacer(1, 1*inch))

highlights = [
    "✓ Complete Analysis with 15 Visualizations",
    "✓ Statistical Insights & Recommendations",
    "✓ Production-Ready Deliverables"
]
for highlight in highlights:
    story.append(Paragraph(highlight, cover_info_style))
    story.append(Spacer(1, 0.1*inch))

story.append(PageBreak())

# Parse markdown and add content
print("\n4. Processing markdown content...")

# Visualization mapping
viz_map = {
    "data quality assessment": ["missing_pattern.png"],
    "descriptive statistics": ["distributions.png", "boxplots.png"],
    "correlation analysis": ["correlation_heatmap.png", "scatter_correlations.png"],
    "soil health score": ["soil_health_factors.png", "soil_health_distribution.png"],
    "categorical analysis": ["crop_distribution.png", "cover_crop_mix_distribution.png",
                             "soil_health_by_cover_boxplot.png", "nutrient_recs_by_crop.png"],
    "advanced insights": ["npk_comparison.png", "traditional_vs_haney.png", "om_vs_health.png"]
}

sections = md_content.split('\n')
viz_count = 0
current_section = ""

for line in sections:
    line = line.strip()

    if not line:
        story.append(Spacer(1, 0.1*inch))
        continue

    # Main title (# )
    if line.startswith('# ') and not line.startswith('## '):
        text = line[2:].strip()
        story.append(Paragraph(text, heading1_style))
        story.append(Spacer(1, 0.2*inch))
        current_section = text.lower()

    # Heading 2 (##)
    elif line.startswith('## ') and not line.startswith('### '):
        text = line[3:].strip()
        story.append(Paragraph(text, heading2_style))
        current_section = text.lower()

        # Check if we should add visualizations after this section
        for key, viz_files in viz_map.items():
            if key in current_section:
                story.append(Spacer(1, 0.2*inch))
                for viz_file in viz_files:
                    viz_path = VIZ_DIR / viz_file
                    if viz_path.exists():
                        try:
                            # Add image with caption
                            img = Image(str(viz_path), width=6.5*inch, height=4*inch)
                            caption = Paragraph(
                                f"<i>{viz_file.replace('.png', '').replace('_', ' ').title()}</i>",
                                styles['Normal']
                            )
                            story.append(KeepTogether([img, caption]))
                            story.append(Spacer(1, 0.2*inch))
                            viz_count += 1
                            print(f"   ✓ Added visualization: {viz_file}")
                        except Exception as e:
                            print(f"   ⚠ Could not add {viz_file}: {str(e)}")

    # Heading 3 (###)
    elif line.startswith('### '):
        text = line[4:].strip()
        story.append(Paragraph(text, heading3_style))

    # Horizontal rule
    elif line.startswith('---'):
        story.append(Spacer(1, 0.1*inch))

    # Bold text or key findings
    elif line.startswith('**') or line.startswith('- **'):
        # Convert markdown bold to HTML
        text = line.replace('**', '<b>').replace('**', '</b>')
        text = text.replace('- ', '• ')
        story.append(Paragraph(text, body_style))

    # Bullet points
    elif line.startswith('- ') or line.startswith('* '):
        text = '• ' + line[2:]
        story.append(Paragraph(text, body_style))

    # Numbered lists
    elif re.match(r'^\d+\.', line):
        story.append(Paragraph(line, body_style))

    # Code blocks or tables (simplified)
    elif line.startswith('```') or line.startswith('|'):
        continue  # Skip for simplicity in this version

    # Regular paragraph
    elif line and not line.startswith('#'):
        # Clean up markdown formatting
        text = line.replace('**', '<b>').replace('**', '</b>')
        text = text.replace('*', '<i>').replace('*', '</i>')
        text = text.replace('`', '<font face="courier">')
        text = text.replace('`', '</font>')
        try:
            story.append(Paragraph(text, body_style))
        except:
            # Skip problematic lines
            continue

print(f"\n   ✓ Processed content with {viz_count} visualizations")

# Build PDF
print("\n5. Building PDF (this may take 30-60 seconds)...")
try:
    doc.build(story)
    print(f"\n   ✓ PDF generated successfully!")
    print(f"   Location: {OUTPUT_PDF}")
    print(f"   Size: {OUTPUT_PDF.stat().st_size / 1024 / 1024:.2f} MB")
except Exception as e:
    print(f"   ✗ Error building PDF: {str(e)}")
    raise

print("\n" + "="*80)
print("PDF GENERATION COMPLETE")
print("="*80)
print(f"\nOpen with: open '{OUTPUT_PDF}'")
